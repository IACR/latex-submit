"""
This is what runs latexmk in docker. It is called from our web server, but may
also be used from the command line.
"""

import argparse
import json
import os
from pathlib import Path
import random
import shutil
import string
import sys
import stat

import docker
from docker.errors import APIError
from docker.types import Mount
_container = None

def run_latex(input_dirname, output_dirname):

    """Run latexmk safely in a docker container.

       args:
           input_dirname: directory where user-uploaded latex sources are. symlinks
               in this directory are ignored but subdirectories are allowed.
           output_dirname:
               path to where resulting output should be deposited. Should not already exist.
       returns: A dict with code and log. The code is the return code from running latexmk, and
                log is the output from running latexmk.
       raises: 
          ValueError if some conditions are not satisfied.
          APIError if there is an error from the docker API.

          """
    input_dir = Path(input_dirname)
    if not input_dir.is_dir():
        raise ValueError('input directory not found: {}'.format(str(input_dir)))
    output_dir = Path(output_dirname)
    if output_dir.is_dir():
        raise ValueError('output_dir should not already exist')

    main_tex_file = Path(input_dir, 'main.tex')
    if not main_tex_file.is_file():
        raise ValueError('missing main.tex')
    # Create a temporary staging_dir for inputs, and copy inputs to
    # staging_dir.  This directory will be mounted as /data in the
    # docker container.
    tmpdirname = ''.join(random.choice(string.ascii_lowercase+string.ascii_uppercase) for n in range(12))
    staging_dir = Path(os.path.dirname(os.path.abspath(__file__))) / Path('staging') / Path(tmpdirname)
    if staging_dir.is_dir():
        raise ValueError('staging directory {} already exists'.format(str(staging_dir.absolute())))
    shutil.copytree(input_dir, staging_dir, symlinks=False)
    # Ensure the texlive user in the Docker can write to the staging folder
    # Moreover, authors might submit temporary files generated by latex 
    # which need to get overwritten so make all files writeable
    for dirpath, dirnames, filenames in os.walk(staging_dir):
        dir_path = Path(dirpath)
        dir_path.chmod(0o775)
        for filename in filenames:
            file_path = Path(os.path.join(dirpath, filename))
            # remove any .sty files, since they can conflict with installed packages.
            if file_path.name.endswith('.sty') or file_path.name.endswith('.bbl'):
                file_path.unlink()
            else:
                file_path.chmod(0o644)
    # Remove any leftover files from LaTeX or latexmk runs by the author
    for i in ['aux', 'out', 'bbl', 'pdf', 'blg', 'log', 'fls', 'fdb_latexmk']:
        if Path(staging_dir, 'main.' + i).is_file():
            os.remove(str(staging_dir.absolute()) + '/main.' + i)
    client = docker.from_env()
    try:
        # We mount the staging_dir as /data in the container.
        mount = Mount('/data', str(staging_dir.absolute()), type='bind')
        container = client.containers.run('debian-slim-texlive2022',
                                          detach=True,                  # Detach the container
                                          network_disabled=True,        # Disable networking
                                          mounts=[mount])               # Specify our mount point = the staging dir
        code, output = container.exec_run('latexmk -g -pdflua -lualatex="lualatex --disable-write18 --nosocket --no-shell-escape" main', workdir='/data')
        shutil.copytree(staging_dir, output_dir, symlinks=False)
        container.kill()
        return {'log': output.decode(), 'exit_code': code}
    except APIError as e:
        print(e)
        raise(e)
    finally:
        shutil.rmtree(staging_dir)
        container.stop()
        container.remove()
    return {'exit_code': 999, 'error': 'Compilation failed: ' + output.decode()}


if __name__ == '__main__':
    argparser = argparse.ArgumentParser(description='Run a latex docker compilation')
    argparser.add_argument('--input_dir',
                           default='tests/passing')
    argparser.add_argument('--output_dir',
                           default='/tmp/output')
    argparser.add_argument('--overwrite',
                           action='store_true')
    args = argparser.parse_args()
    output_dir = Path(args.output_dir)
    if output_dir.is_dir():
        if args.overwrite:
            shutil.rmtree(output_dir)
        else:
            print('use --overwrite to overwrite output_dir')
            exit(1)
    print(json.dumps(run_latex(args.input_dir, args.output_dir), indent=2))



